CXX = g++ ;
CFLAGS = -O0 -ggdb3 -DDEBUG ;
CXXFLAGS = $(CFLAGS) --std=c++11 ;
PROJECTS = abc_ladapakolas hanoi jarda1 jarda2 jarda3 korutak vonatok zart_polygon_keszitese szokereso dns_vizsgalat cso_vasarlas vizitura talalkozasok allatkertek alma arvizmentes arvizmentes_ atlo azonos_csoportok baratok csoportok duplavermes_vasut ekvivalens_csoportok etterem fogadas fogad_ baratok_ ismerosok ismerosok_ ido hideg_es_meleg_napok kozepso_eletkoru kodok ioival-vasutak ;

rule Compile
{
	Depends $(1) : $(2) ;
}
actions Compile
{
	echo -e "\033[1mCompiling $(1)...\033[0m"
	$(CXX) -o $(1) $(2) $(CXXFLAGS)
}

rule Run
{
	Exec run-$(1) : $(1) $(2) ;
	NotFile run-$(1) ;
	Always run-$(1) ;

	Gdb debug-$(1) : $(1) : "-ex 'set args <$(2) 2>/dev/null'" ;
	Depends debug-$(1) : $(2) ;
	NotFile debug-$(1) ;
	Always debug-$(1) ;

	Massif massif.out.$(1) : $(1) : <$(2) ;
	Depends massif.out.$(1) : $(2) ;

	NotFile massif-$(1) ;
	Depends massif-$(1) : massif.out.$(1) ;
	Always massif-$(1) ;
}

rule Exec
{
	Depends $(1) : $(2) ;
}
actions Exec
{
	echo -e "\033[1mRunning $(2[1])...\033[0m"
	echo -ne "\033[33m"; cat $(2[2]); echo -ne "\033[0m"
	./$(2[1]) <$(2[2]) $(3)
	ret=$?
	if [ $ret -eq 0 ]; then
		echo -e "\033[1;32mProgram finished\033[0m"
	else
		echo -e "\033[1;31mProgram finished with status $ret\033[0m"
	fi
}

rule Gdb
{
	Depends $(1) : $(2) ;
	args on $(1) = $(3) ;
}
actions Gdb
{
	gdb $(2) $(args)
}

rule Massif
{
	Valgrind $(1) : $(2) : massif : --massif-out-file=$(1) --time-unit=B : $(3) ;
}

rule Valgrind
{
	Depends $(1) : $(2) ;
	tool on $(1) = $(3) ;
	valgrind_args on $(1) = $(4) ;
	args on $(1) = $(5) ;
}
actions Valgrind
{
	valgrind --tool=$(tool) $(valgrind_args) ./$(2) $(args)
}

rule Project
{
	Compile $(1) : $(1).cpp ;
	Run $(1) : $(1).txt ;
	#Depends all : $(1) ;
}

for project in $(PROJECTS)
{
	#Echo "Found project: $(project)" ;
	Project $(project) ;
}

actions Gitignore
{
	echo $(2) | xargs -n1 >$(1)
}
Gitignore .gitignore : $(PROJECTS) ;
Depends all : .gitignore ;
